(defmodule MAIN (export ?ALL))(deftemplate node (slot ident) (slot gcost) (slot fcost)  (slot father) (slot open))(deftemplate newnode (slot ident) (slot gcost) (slot fcost) (slot father))(deftemplate cell       (slot pos-r)      (slot pos-c)      (slot contains (allowed-values  wall gate empty)));   Rappresentazione grafica del labirinto;   - - - - - - - -;   |W|W|W|W|W|G|W|W|W|W|W|W|W|G|W|W|	10;    - - - - - - - - - - - - - - - -;   |W| | | |W| | |W| | | | |W| | |W|	9;    - - - - - - - - - - - - - - - -;   |W| | | |W| | |W| | | | |W| | |W|	8;    - - - - - - - - - - - - - - - -;   |W| | | |W| | |W|W|W| | |W|W| |W|	7;    - - - - - - - - - - - - - - - -;   |W| | | |W| | | | |W| | |W| | |G|	6;    - - - - - - - - - - - - - - - -;   |W| | | |W| | |W| |W| |W|W| |W|W|	5;    - - - - - - - - - - - - - - - -;   |W| |W| | | | |W| | | | |W| | |W|	4;    - - - - - - - - - - - - - - - -;   |W| |W| | |W|W|W|W| |W|W|W|W| |W	3;    - - - - - - - - - - - - - - - -;   |W| | |W|W| | |W| | |W| |W| | |W	2;    - - - - - - - - - - - - - - - -;   |W| | | | | | |W| | | | | | |W|W|	1;    - - - - - - - - - - - - - - - -;   |W|W|W|W|G|W|W|W|W|W|W|W|G|W|W|W|	0;    - - - - - - - - - - - - - - - -;    0 1 2 3 4 5 6 7 8 9 101112131415(deffacts domain        (cell (pos-r 0) (pos-c 0) (contains wall))	(cell (pos-r 0) (pos-c 1) (contains wall))	(cell (pos-r 0) (pos-c 2) (contains wall))	(cell (pos-r 0) (pos-c 3) (contains wall))	(cell (pos-r 0) (pos-c 4) (contains gate))	(cell (pos-r 0) (pos-c 5) (contains wall))	(cell (pos-r 0) (pos-c 6) (contains wall))	(cell (pos-r 0) (pos-c 7) (contains wall))        (cell (pos-r 0) (pos-c 8) (contains wall))	(cell (pos-r 0) (pos-c 9) (contains wall))	(cell (pos-r 0) (pos-c 10) (contains wall))	(cell (pos-r 0) (pos-c 11) (contains wall))	(cell (pos-r 0) (pos-c 12) (contains gate))	(cell (pos-r 0) (pos-c 13) (contains wall))	(cell (pos-r 0) (pos-c 14) (contains wall))	(cell (pos-r 0) (pos-c 15) (contains wall))	(cell (pos-r 1) (pos-c 0) (contains wall))	(cell (pos-r 1) (pos-c 1) (contains empty))	(cell (pos-r 1) (pos-c 2) (contains empty))	(cell (pos-r 1) (pos-c 3) (contains empty))	(cell (pos-r 1) (pos-c 4) (contains empty))	(cell (pos-r 1) (pos-c 5) (contains empty))	(cell (pos-r 1) (pos-c 6) (contains wall))	(cell (pos-r 1) (pos-c 7) (contains empty))        (cell (pos-r 1) (pos-c 8) (contains empty))	(cell (pos-r 1) (pos-c 9) (contains empty))	(cell (pos-r 1) (pos-c 10) (contains empty))	(cell (pos-r 1) (pos-c 11) (contains empty))	(cell (pos-r 1) (pos-c 12) (contains empty))	(cell (pos-r 1) (pos-c 13) (contains empty))	(cell (pos-r 1) (pos-c 14) (contains wall))	(cell (pos-r 1) (pos-c 15) (contains wall))	(cell (pos-r 2) (pos-c 0) (contains wall))	(cell (pos-r 2) (pos-c 1) (contains empty))	(cell (pos-r 2) (pos-c 2) (contains empty))	(cell (pos-r 2) (pos-c 3) (contains wall))	(cell (pos-r 2) (pos-c 4) (contains wall))	(cell (pos-r 2) (pos-c 5) (contains empty))	(cell (pos-r 2) (pos-c 6) (contains empty))	(cell (pos-r 2) (pos-c 7) (contains wall))        (cell (pos-r 2) (pos-c 8) (contains empty))	(cell (pos-r 2) (pos-c 9) (contains empty))	(cell (pos-r 2) (pos-c 10) (contains wall))	(cell (pos-r 2) (pos-c 11) (contains empty))	(cell (pos-r 2) (pos-c 12) (contains wall))	(cell (pos-r 2) (pos-c 13) (contains empty))	(cell (pos-r 2) (pos-c 14) (contains empty))	(cell (pos-r 2) (pos-c 15) (contains wall))	(cell (pos-r 3) (pos-c 0) (contains wall))	(cell (pos-r 3) (pos-c 1) (contains empty))	(cell (pos-r 3) (pos-c 2) (contains wall))	(cell (pos-r 3) (pos-c 3) (contains empty))	(cell (pos-r 3) (pos-c 4) (contains empty))	(cell (pos-r 3) (pos-c 5) (contains wall))	(cell (pos-r 3) (pos-c 6) (contains wall))	(cell (pos-r 3) (pos-c 7) (contains wall))        (cell (pos-r 3) (pos-c 8) (contains wall))	(cell (pos-r 3) (pos-c 9) (contains empty))	(cell (pos-r 3) (pos-c 10) (contains wall))	(cell (pos-r 3) (pos-c 11) (contains empty))	(cell (pos-r 3) (pos-c 12) (contains wall))	(cell (pos-r 3) (pos-c 13) (contains wall))	(cell (pos-r 3) (pos-c 14) (contains empty))	(cell (pos-r 3) (pos-c 15) (contains wall))	(cell (pos-r 4) (pos-c 0) (contains wall))	(cell (pos-r 4) (pos-c 1) (contains empty))	(cell (pos-r 4) (pos-c 2) (contains wall))	(cell (pos-r 4) (pos-c 3) (contains empty))	(cell (pos-r 4) (pos-c 4) (contains empty))	(cell (pos-r 4) (pos-c 5) (contains empty))	(cell (pos-r 4) (pos-c 6) (contains empty))	(cell (pos-r 4) (pos-c 7) (contains wall))        (cell (pos-r 4) (pos-c 8) (contains  empty))	(cell (pos-r 4) (pos-c 9) (contains  empty))	(cell (pos-r 4) (pos-c 10) (contains wall))	(cell (pos-r 4) (pos-c 11) (contains  empty))	(cell (pos-r 4) (pos-c 12) (contains wall))	(cell (pos-r 4) (pos-c 13) (contains  empty))	(cell (pos-r 4) (pos-c 14) (contains  empty))	(cell (pos-r 4) (pos-c 15) (contains wall))	(cell (pos-r 5) (pos-c 0) (contains wall))	(cell (pos-r 5) (pos-c 1) (contains empty))	(cell (pos-r 5) (pos-c 2) (contains empty))	(cell (pos-r 5) (pos-c 3) (contains empty))	(cell (pos-r 5) (pos-c 4) (contains wall))	(cell (pos-r 5) (pos-c 5) (contains empty))	(cell (pos-r 5) (pos-c 6) (contains empty))	(cell (pos-r 5) (pos-c 7) (contains wall))        (cell (pos-r 5) (pos-c 8) (contains  empty))	(cell (pos-r 5) (pos-c 9) (contains wall))	(cell (pos-r 5) (pos-c 10) (contains wall))	(cell (pos-r 5) (pos-c 11) (contains wall))	(cell (pos-r 5) (pos-c 12) (contains wall))	(cell (pos-r 5) (pos-c 13) (contains  empty))	(cell (pos-r 5) (pos-c 14) (contains wall))	(cell (pos-r 5) (pos-c 15) (contains wall))	(cell (pos-r 6) (pos-c 0) (contains wall))	(cell (pos-r 6) (pos-c 1) (contains empty))	(cell (pos-r 6) (pos-c 2) (contains empty))	(cell (pos-r 6) (pos-c 3) (contains empty))	(cell (pos-r 6) (pos-c 4) (contains wall))	(cell (pos-r 6) (pos-c 5) (contains empty))	(cell (pos-r 6) (pos-c 6) (contains empty))	(cell (pos-r 6) (pos-c 7) (contains  empty))        (cell (pos-r 6) (pos-c 8) (contains  empty))	(cell (pos-r 6) (pos-c 9) (contains wall))	(cell (pos-r 6) (pos-c 10) (contains  empty))	(cell (pos-r 6) (pos-c 11) (contains  empty))	(cell (pos-r 6) (pos-c 12) (contains wall))	(cell (pos-r 6) (pos-c 13) (contains  empty))	(cell (pos-r 6) (pos-c 14) (contains  empty))	(cell (pos-r 6) (pos-c 15) (contains gate))	(cell (pos-r 7) (pos-c 0) (contains wall))	(cell (pos-r 7) (pos-c 1) (contains empty))	(cell (pos-r 7) (pos-c 2) (contains empty))	(cell (pos-r 7) (pos-c 3) (contains empty))	(cell (pos-r 7) (pos-c 4) (contains wall))	(cell (pos-r 7) (pos-c 5) (contains empty))	(cell (pos-r 7) (pos-c 6) (contains empty))	(cell (pos-r 7) (pos-c 7) (contains wall))        (cell (pos-r 7) (pos-c 8) (contains wall))	(cell (pos-r 7) (pos-c 9) (contains wall))	(cell (pos-r 7) (pos-c 10) (contains  empty))	(cell (pos-r 7) (pos-c 11) (contains  empty))	(cell (pos-r 7) (pos-c 12) (contains wall))	(cell (pos-r 7) (pos-c 13) (contains wall))	(cell (pos-r 7) (pos-c 14) (contains  empty))	(cell (pos-r 7) (pos-c 15) (contains wall))	(cell (pos-r 8) (pos-c 0) (contains wall))	(cell (pos-r 8) (pos-c 1) (contains empty))	(cell (pos-r 8) (pos-c 2) (contains empty))	(cell (pos-r 8) (pos-c 3) (contains empty))	(cell (pos-r 8) (pos-c 4) (contains wall))	(cell (pos-r 8) (pos-c 5) (contains empty))	(cell (pos-r 8) (pos-c 6) (contains empty))	(cell (pos-r 8) (pos-c 7) (contains wall))        (cell (pos-r 8) (pos-c 8) (contains  empty))	(cell (pos-r 8) (pos-c 9) (contains  empty))	(cell (pos-r 8) (pos-c 10) (contains  empty))	(cell (pos-r 8) (pos-c 11) (contains  empty))	(cell (pos-r 8) (pos-c 12) (contains wall))	(cell (pos-r 8) (pos-c 13) (contains  empty))	(cell (pos-r 8) (pos-c 14) (contains  empty))	(cell (pos-r 8) (pos-c 15) (contains wall))	(cell (pos-r 9) (pos-c 0) (contains wall))	(cell (pos-r 9) (pos-c 1) (contains empty))	(cell (pos-r 9) (pos-c 2) (contains empty))	(cell (pos-r 9) (pos-c 3) (contains empty))	(cell (pos-r 9) (pos-c 4) (contains wall))	(cell (pos-r 9) (pos-c 5) (contains empty))	(cell (pos-r 9) (pos-c 6) (contains empty))	(cell (pos-r 9) (pos-c 7) (contains wall))        (cell (pos-r 9) (pos-c 8) (contains  empty))	(cell (pos-r 9) (pos-c 9) (contains  empty))	(cell (pos-r 9) (pos-c 10) (contains  empty))	(cell (pos-r 9) (pos-c 11) (contains  empty))	(cell (pos-r 9) (pos-c 12) (contains wall))	(cell (pos-r 9) (pos-c 13) (contains  empty))	(cell (pos-r 9) (pos-c 14) (contains  empty))	(cell (pos-r 9) (pos-c 15) (contains wall))	(cell (pos-r 10) (pos-c 0) (contains wall))	(cell (pos-r 10) (pos-c 1) (contains wall))	(cell (pos-r 10) (pos-c 2) (contains wall))	(cell (pos-r 10) (pos-c 3) (contains wall))	(cell (pos-r 10) (pos-c 4) (contains wall))	(cell (pos-r 10) (pos-c 5) (contains gate))	(cell (pos-r 10) (pos-c 6) (contains wall))	(cell (pos-r 10) (pos-c 7) (contains wall))        (cell (pos-r 10) (pos-c 8) (contains wall))	(cell (pos-r 10) (pos-c 9) (contains wall))	(cell (pos-r 10) (pos-c 10) (contains wall))	(cell (pos-r 10) (pos-c 11) (contains wall))	(cell (pos-r 10) (pos-c 12) (contains wall))	(cell (pos-r 10) (pos-c 13) (contains gate))	(cell (pos-r 10) (pos-c 14) (contains wall))	(cell (pos-r 10) (pos-c 15) (contains wall))        )                         (deffacts S0      (node (ident 0) (gcost 0) (fcost 0) (father NA) (open yes))       (status 0 0 4)      (current 0)      (lastnode 0)      (open-worse 0)      (open-better 0)      (alreadyclosed 0)      (numberofnodes 0))(deffacts final	(goal 10 5)	;;(goal 10 13);;far away goal	;;(goal 10 15);;unachievable goal)(defrule start=>	(focus EXPAND))(defrule stampaSol(declare (salience 101))?f<-(stampa ?id)    (node (ident ?id) (father ?anc&~NA))      (exec ?anc ?id ?oper ?r ?c)=> (printout t " Eseguo azione " ?oper " da stato (" ?r "," ?c ") " crlf)   (assert (stampa ?anc))   (retract ?f))(defrule stampa-fine(declare (salience 102))       (stampa ?id)       (node (ident ?id) (father ?anc&NA))       (open-worse ?worse)       (open-better ?better)       (alreadyclosed ?closed)       (numberofnodes ?n )  => (printout t " stati espansi " ?n crlf)   (printout t " stati generati gia` in closed " ?closed crlf)   (printout t " stati generati gia` in open (open-worse) " ?worse crlf)   (printout t " stati generati gia` in open (open-better) " ?better crlf)   (halt))(defmodule EXPAND (import MAIN ?ALL) (export ?ALL))(defrule up-apply (declare (salience 50))        (current ?curr)        (node (ident ?curr) (open yes))	(status ?curr ?r ?c)        (cell (pos-r =(+ ?r 1)) (pos-c ?c) (contains empty|gate))   =>   (assert (apply ?curr up ?r ?c)))(defrule up-exec (declare (salience 50))        (current ?curr) ?f1<-  (apply ?curr up ?r ?c)        (node (ident ?curr) (gcost ?g))        (goal ?x ?y)   => (bind ?new (gensym*))      (assert (exec ?curr ?new up ?r ?c)              (status ?new (+ ?r 1) ?c)              (newnode (ident ?new) (gcost (+ ?g 1)) 			(fcost (+ (abs (- ?x (+ ?r 1))) (abs (- ?y ?c)) ?g 1))		 (father ?curr))       )      (retract ?f1))(defrule down-apply        (declare (salience 50))        (current ?curr)        (node (ident ?curr)  (open yes))	(status ?curr ?r ?c)        (cell (pos-r =(- ?r 1)) (pos-c ?c) (contains empty|gate))   => 	(assert (apply ?curr down ?r ?c)) )(defrule down-exec        (declare (salience 50))        (current ?curr) ?f1<-  (apply ?curr down ?r ?c)        (node (ident ?curr) (gcost ?g))        (goal ?x ?y)   => (bind ?new (gensym*))(assert (exec ?curr ?new down ?r ?c)	(status ?new (- ?r 1) ?c)        (newnode (ident ?new) (gcost (+ ?g 1))                  (fcost (+ (abs (- ?x (- ?r 1))) (abs (- ?y ?c)) ?g 1))                       (father ?curr)))      (retract ?f1))(defrule right-apply        (declare (salience 50))        (current ?curr)        (node (ident ?curr) (open yes))	(status ?curr ?r ?c)        (cell (pos-c =(+ ?c 1)) (pos-r ?r) (contains empty|gate))   => (assert (apply ?curr right ?r ?c))              )(defrule right-exec        (declare (salience 50))        (current ?curr) ?f1<-  (apply ?curr right ?r ?c)        (node (ident ?curr) (gcost ?g))        (goal ?x ?y)   => (bind ?new (gensym*))      (assert (exec ?curr ?new right ?r ?c)	      (status ?new ?r (+ ?c 1))              (newnode (ident ?new)                        (gcost (+ ?g 1)) (fcost (+ (abs (- ?y (+ ?c 1))) (abs (- ?x ?r)) ?g 1))                       (father ?curr)))              (retract ?f1))(defrule left-apply        (declare (salience 50))        (current ?curr)        (node (ident ?curr) (open yes))	(status ?curr ?r ?c)        (cell (pos-c =(- ?c 1)) (pos-r ?r) (contains empty|gate))   => (assert (apply ?curr left ?r ?c))              )(defrule left-exec (declare (salience 50))        (current ?curr) ?f1<-  (apply ?curr left ?r ?c)        (node (ident ?curr) (gcost ?g))        (goal ?x ?y)   => 	(bind ?new (gensym*))	(assert (exec ?curr ?new left ?r ?c)              (status ?new  ?r (- ?c 1))              (newnode (ident ?new) (gcost (+ ?g 1))                 (fcost (+ (abs (- ?y (- ?c 1))) (abs (- ?x ?r)) ?g 1))                (father ?curr)))      (retract ?f1))(defrule next-phase (declare (salience 100))	(newnode (ident ?new))=>	(focus CHECK))(defrule change-current (declare (salience 25))?f1 <-   (current ?curr)?f2 <-   (node (ident ?curr))         (node (ident ?best&:(neq ?best ?curr)) (fcost ?bestcost) (open yes))         (not (node (ident ?id&:(neq ?id ?curr)) (fcost ?gg&:(< ?gg ?bestcost)) (open yes)))   =>    (assert (current ?best) )         (retract ?f1)         (modify ?f2 (open no))) (defrule open-empty (declare (salience 25))?f1 <-   (current ?curr)?f2 <-   (node (ident ?curr))         (not 		(node (ident ?id&:(neq ?id ?curr))  (open yes) )           ) =>          (retract ?f1)         (modify ?f2 (open no))         (printout t " fail (last  node expanded " ?curr ")" crlf)         (halt))                (defmodule CHECK (import EXPAND ?ALL)(export ?ALL))(defrule goal-not-yet (declare (salience 50))    (newnode (ident ?id))    (goal ?r ?c)    (not (status ?id ?r ?c))=>    (focus NEW))(defrule solution-exist (declare (salience 25))?f <-     (newnode (ident ?id) (father ?father))     (goal ?r ?c)     (node (ident ?father)  (gcost ?g))     (status ?id ?r ?c)        =>      (assert (node (ident ?id) (father ?father) (gcost (+ ?g +1)) (fcost 0) (open no)))     (printout t " Esiste soluzione per goal (" ?r "," ?c ") con costo " (+ ?g  1) crlf)     (assert (stampa ?id))     (retract ?f)     (pop-focus)     (pop-focus))(defmodule NEW (import CHECK ?ALL) (export ?ALL))(defrule check-closed (declare (salience 50))  ?f1 <-    (newnode (ident ?id))	   (status ?id ?r ?c)	   (status ?old ?r ?c)           (node (ident ?old) (open no)) ?f2 <-    (alreadyclosed ?a)    =>           (assert (alreadyclosed (+ ?a 1)))           (retract ?f1 ?f2)           (pop-focus)           (pop-focus))(defrule check-open-worse(declare (salience 50)) ?f1 <-    (newnode (ident ?id) (gcost ?g) (father ?anc))	   (status ?id ?r ?c)	   (status ?old ?r ?c)           (node (ident ?old) (gcost ?g-old) (open yes))           (test (or (> ?g ?g-old) (= ?g-old ?g))) ?f2 <-    (open-worse ?a)    =>           (assert (open-worse (+ ?a 1)))           (retract ?f1)           (retract ?f2)           (pop-focus))(defrule check-open-better(declare (salience 50)) ?f1 <- (newnode (ident ?id) (gcost ?g) (fcost ?f) (father ?anc))       (status ?id ?r ?c)?f2 <- (status ?old ?r ?c)?f3 <- (node (ident ?old) (gcost ?g-old) (open yes))           (test (<  ?g ?g-old))?f4 <- (open-better ?a)    =>       (assert (node (ident ?id) (gcost ?g) (fcost ?f) (father ?anc) (open yes)))  (assert (open-better (+ ?a 1)))  (retract ?f1 ?f2 ?f3 ?f4)  (pop-focus)  (pop-focus))(defrule add-open (declare (salience 25)) ?f1 <-    (newnode (ident ?id) (gcost ?g) (fcost ?f)(father ?anc))           (status ?id ?r ?c) ?f2 <-    (numberofnodes ?a)    =>        (assert (node (ident ?id) (gcost ?g) (fcost ?f)(father ?anc) (open yes)))   (assert (numberofnodes (+ ?a 1)))   (retract ?f1 ?f2)   (pop-focus)   (pop-focus))